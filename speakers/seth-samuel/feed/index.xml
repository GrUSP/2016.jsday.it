<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Seth Samuel &#8211; jsDay 2016</title>
	<atom:link href="/speakers/seth-samuel/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>The international Javascript Conference</description>
	<lastBuildDate>Wed, 11 May 2016 15:18:08 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.7.2</generator>
	<item>
		<title>16 Milliseconds or Bust</title>
		<link>/talk/16-milliseconds-or-bust/</link>
		<pubDate>Mon, 09 May 2016 12:56:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		
		<guid isPermaLink="false">/?post_type=talk&#038;p=520</guid>
		<description><![CDATA[It&#8217;s never been more important for your web page to maintain a silky-smooth 60 frames per second. That means there&#8217;s only 16 milliseconds for Javascript to execute between each frame. We&#8217;ll learn several techniques for improving UI performance by stopping Javascript from blocking UI updates.]]></description>
				<content:encoded><![CDATA[<p>It&#8217;s never been more important for your web page to maintain a silky-smooth 60 frames per second. That means there&#8217;s only 16 milliseconds for Javascript to execute between each frame. We&#8217;ll learn several techniques for improving UI performance by stopping Javascript from blocking UI updates.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Arbitrary Computation on the GPU Using WebGL</title>
		<link>/talk/arbitrary-computation-on-the-gpu-using-webgl/</link>
		<pubDate>Mon, 21 Mar 2016 18:21:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		
		<guid isPermaLink="false">/?post_type=talk&#038;p=475</guid>
		<description><![CDATA[WebGL is already widely in use for 3D graphics and image processing but could be used for much more. We&#8217;ll learn how to pass arbitrary data to the GPU for parallel processing, how to get that processed data back into Javascript, and all the reasons this doesn&#8217;t work even when it should. This talk starts [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><span data-sheets-value="[null,2,&quot;WebGL is already widely in use for 3D graphics and image processing but could be used for much more. We'll learn how to pass arbitrary data to the GPU for parallel processing, how to get that processed data back into Javascript, and all the reasons this doesn't work even when it should. This talk starts with a review of WebGL shaders and how data is passed through the WebGL pipeline and processed in parallel. Next I'll show some examples of traditional image processing using WebGL. After that, I'll explain how to pass arbitrary data into the GPU and how to retrieve output from those parallel calculations. Finally, there will be an example of this system in action, and then several examples that don't work as expected with explanations of the limitations of the current WebGL architecture.&quot;]" data-sheets-userformat="[null,null,9089,[null,0],null,null,null,null,null,null,0,4,0,null,null,null,8]">WebGL is already widely in use for 3D graphics and image processing but could be used for much more. We&#8217;ll learn how to pass arbitrary data to the GPU for parallel processing, how to get that processed data back into Javascript, and all the reasons this doesn&#8217;t work even when it should. This talk starts with a review of WebGL shaders and how data is passed through the WebGL pipeline and processed in parallel. Next I&#8217;ll show some examples of traditional image processing using WebGL. After that, I&#8217;ll explain how to pass arbitrary data into the GPU and how to retrieve output from those parallel calculations. Finally, there will be an example of this system in action, and then several examples that don&#8217;t work as expected with explanations of the limitations of the current WebGL architecture.</span></p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

 Served from: 2016.jsday.it @ 2017-02-13 21:20:39 by W3 Total Cache -->
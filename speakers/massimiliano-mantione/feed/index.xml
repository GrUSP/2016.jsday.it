<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Massimiliano Mantione &#8211; jsDay 2016</title>
	<atom:link href="/speakers/massimiliano-mantione/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>The international Javascript Conference</description>
	<lastBuildDate>Wed, 11 May 2016 15:18:08 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.7.2</generator>
	<item>
		<title>FFTT: A new concept of build tool.</title>
		<link>/talk/fftt-a-new-concept-of-build-tool/</link>
		<pubDate>Sat, 12 Mar 2016 13:27:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		
		<guid isPermaLink="false">/?post_type=talk&#038;p=462</guid>
		<description><![CDATA[FFTT (Functional File Tree Transforms) is a new, Docker-centric build tool I am working on, implemented with nodejs. It handles builds as a pure functions that transform a file tree (the source, or input) into another file tree (the build artifact, or output). Every file and directory involved in the build (source, intermediate and final [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><span data-sheets-value="[null,2,&quot;FFTT (Functional File Tree Transforms) is a new, Docker-centric build tool I am working on, implemented with nodejs. It handles builds as a pure functions that transform a file tree (the source, or input) into another file tree (the build artifact, or output). Every file and directory involved in the build (source, intermediate and final artifacts) are hashed and stored in a content-addressable storage (git-like). This might sound crazy at first but in practice it makes every build extremely fast and totally deterministic. Also the recently-released Google build tool, Bazel, works in this way, but FFTT goes a couple of steps further by being Docker centric (every build step runs in a docker container to ensure full determinism), and it exports every build artifact as a ready-to-run-in-production file tree (exportable as a Docker volume), enabling fast (milliseconds!) and deterministic deployments. This makes it possible to run the same continuous deployment pipeline both in production and while developing on a local workstation, essentially performing a local deployment at every rebuild.&quot;]" data-sheets-userformat="[null,null,9089,[null,0],null,null,null,null,null,null,0,4,0,null,null,null,8]">FFTT (Functional File Tree Transforms) is a new, Docker-centric build tool I am working on, implemented with nodejs. It handles builds as a pure functions that transform a file tree (the source, or input) into another file tree (the build artifact, or output). Every file and directory involved in the build (source, intermediate and final artifacts) are hashed and stored in a content-addressable storage (git-like). This might sound crazy at first but in practice it makes every build extremely fast and totally deterministic. Also the recently-released Google build tool, Bazel, works in this way, but FFTT goes a couple of steps further by being Docker centric (every build step runs in a docker container to ensure full determinism), and it exports every build artifact as a ready-to-run-in-production file tree (exportable as a Docker volume), enabling fast (milliseconds!) and deterministic deployments. This makes it possible to run the same continuous deployment pipeline both in production and while developing on a local workstation, essentially performing a local deployment at every rebuild.</span></p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

 Served from: 2016.jsday.it @ 2017-02-13 21:20:40 by W3 Total Cache -->
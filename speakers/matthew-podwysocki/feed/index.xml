<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Matthew Podwysocki &#8211; jsDay 2016</title>
	<atom:link href="/speakers/matthew-podwysocki/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>The international Javascript Conference</description>
	<lastBuildDate>Wed, 11 May 2016 15:18:08 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.7.2</generator>
	<item>
		<title>Functional Programming and Async Programming Workshop</title>
		<link>/talk/building-reactive-architectures-2/</link>
		<pubDate>Wed, 06 Apr 2016 13:50:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		
		<guid isPermaLink="false">/?post_type=talk&#038;p=490</guid>
		<description><![CDATA[What’s does a mouse drag event have in common with an Array of numbers? The answer to this question may surprise you: they are both collections. This key insight holds the key to dramatically simplifying asynchronous programming in Javascript. In this tutorial you will learn how you can use the familiar Javascript Array methods to [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><span data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;What\u2019s does a mouse drag event have in common with an Array of numbers? The answer to this question may surprise you: they are both collections. This key insight holds the key to dramatically simplifying asynchronous programming in Javascript. In this tutorial you will learn how you can use the familiar Javascript Array methods to create surprisingly expressive asynchronous programs.&quot;}" data-sheets-userformat="{&quot;2&quot;:9091,&quot;3&quot;:[null,0],&quot;4&quot;:[null,2,65280],&quot;10&quot;:0,&quot;11&quot;:4,&quot;12&quot;:0,&quot;16&quot;:8}">What’s does a mouse drag event have in common with an Array of numbers? The answer to this question may surprise you: they are both collections. This key insight holds the key to dramatically simplifying asynchronous programming in Javascript. In this tutorial you will learn how you can use the familiar Javascript Array methods to create surprisingly expressive asynchronous programs.</span></p>
<p>&nbsp;</p>
]]></content:encoded>
			</item>
		<item>
		<title>Building Reactive Architectures</title>
		<link>/talk/building-reactive-architectures/</link>
		<pubDate>Wed, 06 Apr 2016 13:42:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		
		<guid isPermaLink="false">/?post_type=talk&#038;p=486</guid>
		<description><![CDATA[In the past few years, we’ve seen many approaches to the MV* architectures from Backbone, knockout, Angular, and many other frameworks that came and went in between times. Some of these frameworks suffered from performance issues with two way data binding, data loading and so forth. Along came React, getting rid of the two way [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><span data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;In the past few years, we\u2019ve seen many approaches to the MV* architectures from Backbone, knockout, Angular, and many other frameworks that came and went in between times. Some of these frameworks suffered from performance issues with two way data binding, data loading and so forth. Along came React, getting rid of the two way data binding, and bringing a new way of thinking of how we design web apps. Let\u2019s take some of those lessons, with immutability, unidirectional data flow, and reactive programming to create new architectures such as those seen in Cycle.js, Yolk.js and even React with RxJS and let your mind run free on these new ideas.&quot;}" data-sheets-userformat="{&quot;2&quot;:9091,&quot;3&quot;:[null,0],&quot;4&quot;:[null,2,65280],&quot;10&quot;:0,&quot;11&quot;:4,&quot;12&quot;:0,&quot;16&quot;:8}">In the past few years, we’ve seen many approaches to the MV* architectures from Backbone, knockout, Angular, and many other frameworks that came and went in between times. Some of these frameworks suffered from performance issues with two way data binding, data loading and so forth. Along came React, getting rid of the two way data binding, and bringing a new way of thinking of how we design web apps. Let’s take some of those lessons, with immutability, unidirectional data flow, and reactive programming to create new architectures such as those seen in Cycle.js, Yolk.js and even React with RxJS and let your mind run free on these new ideas.</span></p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

 Served from: 2016.jsday.it @ 2017-02-13 21:20:34 by W3 Total Cache -->